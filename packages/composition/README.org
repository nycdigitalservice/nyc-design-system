#+title: Composition

Composition classes can be used to control page layout and spacing
between page items

** Container

The =container= class *contains* elements to a *maximum size*, provides
horizontal *padding*, and is *centered* by default

#+BEGIN_SRC css :noweb-ref container :noweb yes
  .center {
    --_gutter: var(--nyc-cmp-container-gutter, 1rem);
    --_max-w: var(--nyc-sys-size-width-page-max, 64rem);

    box-sizing: content-box;
    margin-inline: auto;
    max-inline-size: var(--_max-w);
    padding-inline: var(--_gutter);
    container: container / inline-size;
  }
#+END_SRC

** Region

The =region= class supplies consistent vertical padding to sections of content

#+BEGIN_SRC css :noweb-ref region :noweb yes
  .region {
    --_region-space: var(--nyc-cmp-region-space);

    padding-block: var(--_region-space);
  }

  <<region-space()>>
#+END_SRC

#+name: region-space
#+begin_src emacs-lisp
  (setq space-scale '("sm" "base" "lg" "xl" "2xl" "3xl" "4xl"))
  (mapconcat
   (lambda (str)
     (format-spec
      ".region[data-region-space=\"%s\"] { --_region-space: var(--nyc-sys-space-%s); }\n"
      (format-spec-make ?s str)))
   space-scale)
#+end_src

** Flow

The =flow= class controls vertical space between child elements in a
content block. The =data-flow-space= attribute can be used to adjust
this spacing on a per-element level.

#+begin_src css :noweb-ref flow :noweb yes
  /* Set default flow space to prevent inheritance when nesting */
  .flow {
    --nyc-cmp-flow-space: var(--nyc-sys-space-lg);
  }

  .flow > * {
    margin-block: 0;
  }

  .flow > * + *,
  .flow[data-flow-recursive] * + * {
    margin-block-start: var(--nyc-cmp-flow-space);
  }
  
  <<flow-space()>>
#+end_src

#+name: flow-space
#+begin_src emacs-lisp
  (mapconcat
  (lambda (str)
    (format-spec
     "[data-flow-space=\"%s\"] { --nyc-cmp-flow-space: var(--nyc-sys-space-%s); }\n"
     (format-spec-make ?s str)))
  space-scale)
#+end_src

** Grid

The =grid= class creates CSS grid layouts that are customizable via CSS
variables

*** Custom properties

| Property                         | Description                                                                          | Default   |
|----------------------------------+--------------------------------------------------------------------------------------+-----------|
| --nyc-cmp-grid-gutter            | Used to set the =gap= property                                                         | 1rem      |
| --nyc-cmp-grid-placement         | How to place items in the grid, can be ~auto-fit~, ~auto-fill~, or a fixed integer       | auto-fill |
| --nyc-cmp-grid-min-item-size     | What is the minimum size a grid item can reach before layout breaks?                 | 16rem     |
| --nyc-cmp-grid-max-item-size     | What is the maximum size a grid item can reach before layout breaks?                 | 1fr       |
| --nyc-cmp-grid-cols              | How many columns should be in a row?                                                 | 1         |
| --nyc-cmp-grid-item-shrink-ratio | If not setting a fixed min size, by what percentage can the item shrink before layout breaks? | .7        |

*** Base

#+BEGIN_SRC css :noweb-ref grid
  .grid {
    --_gutter: var(--nyc-cmp-grid-gutter, 1rem);
    --_placement: var(--nyc-cmp-grid-placement, auto-fill);
    --_min-item-size: var(--nyc-cmp-grid-min-item-size, 16rem);
    --_max-item-size: var(--nyc-cmp-grid-max-item-size, 1fr);
    --_cols: var(--nyc-cmp-grid-cols, 1);
    --_item-shrink-ratio: var(--nyc-cmp-grid-item-shrink-ratio, .7);
    --_max-w: calc(var(--nyc-sys-size-width-page-max) * 1.1 + ((var(--_cols) - 1) * (var(--_gutter) * 1)));

    /* Setting container property breaks grid on Safari */
    /* container: grid-container / inline-size; */
    display: grid;
    gap: var(--_gutter);
    grid-auto-rows: 1fr
  }

  @supports (width: min(250px, 100%)) {
    .grid {
      grid-template-columns: repeat(
        var(--_placement),
        minmax(var(--_min-item-size), var(--_max-item-size))
      );
    }
  }

  .grid[data-layout^="col-"] {
    --nyc-cmp-grid-min-item-size: calc((var(--_max-w) / var(--_cols)) * var(--_item-shrink-ratio));
    --nyc-cmp-grid-placement: auto-fit;
    --nyc-cmp-grid-gutter: var(--nyc-sys-space-sm);
  }

  .grid[data-layout="col-4"] {
    --nyc-cmp-grid-cols: 4;
  }

  .grid[data-layout="col-3"] {
    --nyc-cmp-grid-cols: 3;
  }

  .grid[data-layout="col-2"] {
    --nyc-cmp-grid-cols: 2;
  }

  /* TODO: address max hard-coded value */
  @container container (max-width: 806px) {
    .grid[data-layout="col-4"] {
      --nyc-cmp-grid-cols: 2;
      --nyc-cmp-grid-item-shrink-ratio: .5;
    }
  }
#+END_SRC

*** Figure split layout

Given you have three (or more) elements that are stacked on mobile,
the figure split layout allows you to position the =.figure= element
side-by-side on desktop, regardless of its order in the
markup. Especially useful if the markup order is =heading= -> =figure= ->
=body=.

#+begin_src css :noweb-ref grid
  .grid[data-layout=figure-split] {
    grid-template-columns: 1fr;
    grid-auto-rows: auto;
    --_gutter: 0;
  }

  @media (min-width: 768px) {
    .grid[data-layout=figure-split] {
      --_gutter: var(--nyc-sys-space-fluid-lg);
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: auto 1fr;
      grid-template-areas:
      "heading figure"
      "body figure";
      row-gap: 0;

      & :--heading {
        grid-area: heading;
      }

      & .figure {
        grid-area: figure;
        margin-block-start: 0;
      }

      & > * {
        grid-area: body;
      }

      &[data-split-direction=left] {
        grid-template-areas:
        "figure heading"
        "figure body";
      }
    }
  }
#+end_src

** Sidebar

#+BEGIN_SRC css :noweb-ref sidebar
  .with-sidebar {
    display: flex;
    flex-wrap: wrap;
    gap: var(--s1);
  }

  .with-sidebar > :first-child {
    flex-grow: 1;
  }

  .with-sidebar > :last-child {
    flex-basis: 0;
    flex-grow: 999;
    min-inline-size: 50%;
  }
#+END_SRC

** Switcher

#+begin_src css :noweb-ref switcher
  .switcher {
    display: flex;
    flex-wrap: wrap;
    gap: var(--nyc-sys-dimension-space-s-m);
    container: switcher / inline-size;
  }

  .switcher > * {
    flex-grow: 1;
    flex-basis: calc(( 40rem - 100%) * 999);
  }

  .switcher > :nth-last-child(n+ 4),
  .switcher > :nth-last-child(n+ 4) ~ * {
    flex-basis: 100%;
  }

  .switcher[data-layout="col-1-3-2"] {
    & > :nth-child(2) {
      order: 3;
    }

    & > :nth-child(3) {
      flex-grow: 2;
    }
  }

  @container switcher (max-width: 40rem) {
    .switchert[data-layout="col-1-3-2"] {
      & > :nth-child(2) {
        order: initial;
      }
    }
  }
#+end_src

** Appendix :noexport:

#+BEGIN_SRC css :tangle src/index.css :noweb yes
  /* Composition classes */

  /* Container */

  <<container>>

  /* Region */

  <<region>>

  /* Flow */

  <<flow>>

  /* Grid */

  <<grid>>

  /* Sidebar */

  <<sidebar>>

  /* Switcher */

  <<switcher>>
#+END_SRC
