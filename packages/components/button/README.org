#+title: Button

A button draws attention to important actions with a large selectable
surface.

** Examples

#+html: <div class="example-wrapper example-list">
#+results: button-basic-example
#+html: </div>

#+name: button-basic-example
#+begin_src html :exports both :results replace html
  <a href="#" class="button">Default button</a>
  <a href="#" class="button" data-variant="primary">Primary button</a>
  <a href="#" class="button">
    <span>Button with icon</span>
    <i class="i-ri:arrow-right-line"></i>
  </a>

#+end_src

** Custom properties

Use these custom properties in your theme to override default styling

| Property                      | Default      |
|-------------------------------+--------------|
| --nyc-cmp-button-color        | currentColor |
| --nyc-cmp-button-background   | white        |
| --nyc-cmp-button-border-width | 2px          |
| --nyc-cmp-button-border-color | grey         |
| --nyc-cmp-button-shadow       | none         |
| --nyc-cmp-button-padding      | .75rem       |

** Base styles

The =button= CSS class implements the custom properties and other
default styles.

*** Mixin

#+begin_src css :noweb-ref mixins-base
  @define-mixin button {
      --_background: var(--nyc-cmp-button-background, hsl(0 0% 100%));
      --_background-hover: var(--nyc-cmp-button-background-hover, hsl(0 0% 100%));
      --_border-color: var(--nyc-cmp-button-border-color, hsl(0 0% 93%));
      --_border-color-hover: var(--nyc-cmp-button-border-color-hover, currentColor);
      --_border-width: var(--nyc-cmp-button-border-width, 2px);
      --_border-radius: var(--nyc-cmp-button-border-radius, 0);
      --_color: var(--nyc-cmp-button-color, hsl(0 0% 0%));
      --_color-hover: var(--nyc-cmp-button-color-hover, inherit);
      --_font-weight: var(--nyc-cmp-button-font-weight, 500);
      --_font-size: var(--nyc-cmp-button-font-size, 500);
      --_shadow: var(--nyc-cmp-button-shadow, none);
      --_padding-block: var(--nyc-cmp-button-padding-block, .75rem);
      --_padding-inline: var(--nyc-cmp-button-padding-inline, .75rem);
      --_outline-color: var(--nyc-cmp-button-outline-color, inherit);
      --_gap: var(--nyc-cmp-button-gap, .5rem);
      appearance: none;
      background-color: var(--_background);
      border-color: var(--_border-color);
      border-width: var(--_border-width);
      border-style: solid;
      border-radius: var(--_border-radius);
      color: var(--_color);
      padding: var(--_padding-block) var(--_padding-inline);
      box-shadow: var(--_shadow);
      text-decoration: none;
      cursor: pointer;
      font-weight: var(--_font-weight);
      font-size: var(--_font-size);
      line-height: inherit;
      display: inline-flex;
      gap: var(--_gap);
      align-items: center;
      transition: all 0.3s ease;

      /* & > :first-child:not(i) { */
      /*   flex-grow: 1; */
      /*   width: max-content; */
      /* } */

      /* & > i:last-child { */
      /*   flex-shrink: 0; */
      /*   margin-block: auto; */
      /*   font-size: 1.5rem; */

      /*   margin-inline-start: .5em; */
      /* } */

      &:hover {
        background: var(--_background-hover);
        color: var(--_color-hover);
        border-color: var(--_border-color-hover);
        text-decoration: none;
      }

      &:focus {
        outline-color: var(--_outline-color);
      }
  }
#+end_src

*** Default class

#+begin_src css :noweb-ref default-base
  .button,
  .button:link,
  .button:visited {
    @mixin button
  }
  #+end_src

*** AEM class

#+begin_src css :noweb-ref aem-base
  .cmp-button,
  .cmp-button:link,
  .cmp-button:visited {
    @mixin button
  }
#+end_src

** Variants

*** Primary

**** Mixin

#+begin_src css :noweb-ref mixins-primary
  @define-mixin button-primary {
    --nyc-cmp-button-background: var(--nyc-sys-color-primary);
    --nyc-cmp-button-color: var(--nyc-sys-color-on-primary);
    --nyc-cmp-button-border-color: var(--nyc-sys-color-primary);
    --nyc-cmp-button-shadow: none;
    &:hover {
      --nyc-cmp-button-color-hover: var(--nyc-cmp-button-color);
      --nyc-cmp-button-background-hover: var(--nyc-sys-color-primary);
      --nyc-cmp-button-border-color-hover: var(--nyc-sys-color-primary);
    }    
  }
#+end_src

**** Default class

#+begin_src css :noweb-ref default-primary
  .button[data-variant=primary] {
    @mixin button-primary
  }
#+end_src

**** AEM class

#+begin_src css :noweb-ref aem-primary
  .cmp-button--primary .cmp-button {
    @mixin button-primary
  }
#+end_src

*** Sizes

**** Mixin

#+begin_src css :noweb-ref mixins-sizes
  @define-mixin button-sm {
    --nyc-cmp-button-border-radius: var(--nyc-sys-radius-lg);
    --nyc-cmp-button-padding-block: var(--nyc-sys-space-xs);
    --nyc-cmp-button-padding-inline: var(--nyc-sys-space-sm);
    --nyc-cmp-button-font-size: var(--nyc-sys-size-body-base);
    --nyc-cmp-button-font-weight: 600;
  }
#+end_src

**** Default class

#+begin_src css :noweb-ref default-sizes
  .button[data-size=sm] {
    @mixin button-sm
  }
#+end_src

**** AEM class

#+begin_src css :noweb-ref aem-sizes
  .cmp-button--sm .cmp-button {
    @mixin button-sm
  }
#+end_src

** Javascript

*** Toggle Button Class

The Toggle Button is a [[https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements#types_of_custom_element][Customized Built-in Button Element]] that when
clicked toggles the visibility of another element.

#+begin_src js :tangle src/js/toggle-button.js
  import { toggle } from '@nycds/utilities';

  export default class ToggleButton extends HTMLButtonElement {
    connectedCallback() {
      if (!this.hasAttribute('aria-controls')) {
        console.error(
          `ToggleButton: "aria-controls" must be set to the
                            ID of the element you are toggling`
        );
        return;
      }
      if (!this.hasAttribute('aria-expanded')) {
        console.error(
          `ToggleButton: "aria-expanded" must be set to the
                 toggled elements initial visibility, either
                 "true" or "false"`
        );
        return;
      }
      this.addEventListener('click', this);
    }
    handleEvent(e) { this['on' + e.type](e); }
    onclick(e) {
      toggle(this);
    }
  }
#+end_src

*** Define custom element

To provide the button for use we import the =ToggleButton= class and
define the =nyc-toggle-button= custom element. Note the use of =extends=
here to create a [[https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements#types_of_custom_element][customized built-in element]].

#+begin_src js :tangle src/js/index.js
  import ToggleButton from './toggle-button';
  if (!customElements.get('nyc-toggle-button')) {
    window.customElements.define('nyc-toggle-button', ToggleButton, { extends: 'button' });
  }
#+end_src

** File exports :noexport:

*** Mixins

#+begin_src css :noweb yes :tangle src/css/mixins.css
  /* Generated from README.org - do not edit directly */
  <<mixins-base>>
  <<mixins-primary>>
  <<mixins-sizes>>
#+end_src

*** Default

#+begin_src css :noweb yes :tangle src/css/index.css
  /* Generated from README.org - do not edit directly */
  @import './mixins.css';

  <<default-base>>
  <<default-primary>>
  <<default-sizes>>
#+end_src

*** AEM

#+begin_src css :noweb yes :tangle src/css/aem/index.css
  /* Generated from README.org - do not edit directly */
  @import '../mixins.css';

  <<aem-base>>
  <<aem-primary>>
  <<aem-sizes>>
#+end_src
